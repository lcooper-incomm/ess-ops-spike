//package com.incomm.cca.qa.integration;
//
//import com.incomm.cca.model.dto.i3.I3CallRequestView;
//import com.incomm.cca.qa.integration.BaseIT;
//import org.springframework.http.HttpStatus;
//import org.springframework.http.ResponseEntity;
//import org.testng.ITestContext;
//import org.testng.annotations.Test;
//
//import java.net.MalformedURLException;
//
//import static org.hamcrest.MatcherAssert.assertThat;
//import static org.hamcrest.Matchers.*;
//
///**
//* User: mgalloway
//* Date: 10/15/13
//* Time: 9:21 AM
//*/
//public class I3CallHandlingIntegrationAT extends BaseIT {
//
//    public I3CallHandlingIntegrationAT(ITestContext testContext) throws Exception {
//        super(testContext);
//    }
//
//    @Test(groups = {"version-3.4.0", "load", "i3", "integration"}, invocationCount = 100, threadPoolSize = 50, enabled = false)
//    public void LOAD_autoWrapTimerJob() throws InterruptedException {
//
//        // Test Data
//        String uid = ivrUtil.generateUid();
//        String callId = i3Util.generateCallId();
//        String callIdKey = callId;
//        String agentUsername = "pboatwright";
//        String ani = "1-800-698-4940";
//        String dnis = "8555984818";
//        String queue = "General";
//        String connectType = "NORMAL";
// //       String disconnectType = "REMOTE";
//
//        // Connect Call
//        I3CallRequestView call = i3Util.newI3CallDto(callId, callIdKey, agentUsername, ani, dnis, queue, uid, connectType);
//        System.out.print("Connected...[" + callId + "]...");
//        String callJson = i3Util.getI3CallDtoJson(call);
//        ResponseEntity<String> connectResponse = i3Module.receiveCall(callJson);
//        assertThat(connectResponse.getStatusCode(), is(equalTo(HttpStatus.OK)));
//
//        // Wait at least 6 seconds so not to get caught in 5-second rule for auto-wrap-up
//        System.out.print("Sleeping...[" + callId + "]...");
//        Thread.sleep(5500);
//
//        // Disconnect same call
//        System.out.print("Disconnect...[" + callId + "]");
////        ResponseEntity<String> disconnectResponse = i3Module.callDisconected(callId, disconnectType, agentUsername);
// //       assertThat(disconnectResponse.getStatusCode(), is(equalTo(HttpStatus.OK)));
//
//    }
//
//
////    @Test(groups = {"version-2.3.0", "in-progress", "i3", "integration"}, enabled = false)
////    public void testReceiveCallResponseNoIVR() {
////
////        String uid = ivrUtil.generateUid();
////        String callId = i3Util.generateCallId();
////
////        // Create new call object for call detail
////        I3Call expectedCall = i3Util.newI3call(callId, "AQAT", "1-800-698-4940", "763-422-4075",
////                "PayPal", uid, new ArrayList<>(Arrays.asList("54", "55", "23")));
////        String callJson = i3Util.getI3CallJson(expectedCall);
////
////        //Receive Call (picked up by agent)
////        ResponseEntity<String> i3Response = i3Module.receiveCall(callJson);
////        String statusCode = i3Response.getStatusCode().toString();
////        I3Call response = I3Util.getI3call(i3Response.getBody());
////
////        // Set the Call ID from the response provided in the API call (dynamically generated by call)
////        expectedCall.setId(response.getId());
////
////        //Validate Response
////        assertThat("Post received (picked up) call API StatusCode is 200", statusCode, is(equalTo("200")));
////        assertThat("I3 Response Details matches the expected Call", response, is(equalTo(expectedCall)));
////
////        // Validate Call Details was created on the fly due to no matching IVR details previously found
////        Map<String, Object> callDetail = transactionUtil.getCallDetailsByUid(uid);
////        assertThat("Call details: ANI", callDetail.get("called_from").toString(), is(equalTo(expectedCall.getAni())));
////        assertThat("Call details: DNIS", callDetail.get("number_called").toString(), is(equalTo(expectedCall.getDnis())));
////        assertThat("Call details: UID", callDetail.get("uid").toString(), is(equalTo(expectedCall.getUid())));
////        assertThat("Call details: ID is not null", callDetail.get("id").toString(), is(notNullValue()));
////        assertThat("Call details: Created is not null", callDetail.get("created").toString(), is(notNullValue()));
////        assertThat("Call details: Location ID", callDetail.get("location_id").toString(), is(equalTo("30850"))); // Location is auto looked up
////
////    }
////
////    @Test(groups = {"version-2.3.0", "in-progress", "i3", "integration"}, enabled = false)
////    public void testReceiveCallAndAssociatedWithDetails() {
////
////        String uid = ivrUtil.generateUid();
////        String callId = i3Util.generateCallId();
////
////        // Create new call detail object
////        IvrCallDetail callDetail = ivrUtil.newIvrCallDetail(uid, "1-800-698-4940", "404-935-4937", "702-456-7878", "1338004934", null, null);
////        String callDetailJson = ivrUtil.getIvrCallDetailJson(callDetail);
////
////        // IVR forward of call detail
////        ivrModule.postCallDetail(callDetailJson).getBody();
////
////        // Create new call object for call detail
////        I3Call expectedCall = i3Util.newI3call(callId, "AQAT", "1-800-698-4940", "404-935-4937",
////                "PayPal", uid, new ArrayList<>(Arrays.asList("54", "55", "23")));
////        String callJson = i3Util.getI3CallJson(expectedCall);
////
////        //Receive Call (picked up by agent)
////        ResponseEntity<String> i3Response = i3Module.receiveCall(callJson);
////        String statusCode = i3Response.getStatusCode().toString();
////        I3Call response = I3Util.getI3call(i3Response.getBody());
////
////        // Set the Call ID from the response provided in the API call (dynamically generated by call)
////        expectedCall.setId(response.getId());
////
////        //Validate Response
////        assertThat("Post received (picked up) call API StatusCode is 200", statusCode, is(equalTo("200")));
////        assertThat("I3 Response Details matches the expected Call", response, is(equalTo(expectedCall)));
////
////        // Validate new call record is associated with call detail from IVR
////        Map<String, Object> actualCall = transactionUtil.getCall(response.getId().toString());
////        Map<String, Object> actualCallDetail = transactionUtil.getCallDetailsByUid(uid);
////        assertThat("Call is Associated with Call Detail in DB", actualCall.get("call_detail_id"), is(equalTo(actualCallDetail.get("id"))));
////        assertThat("Call Detail is Associated with UID in DB", actualCallDetail.get("uid").toString(), is(equalTo(uid)));
////
////    }
////
////    @Test(groups = {"version-2.3.0", "in-progress", "i3", "integration"}, enabled = false)
////    public void testReceiveMultipleCall() {
////
////        String uid = ivrUtil.generateUid();
////        String callId1 = i3Util.generateCallId();
////        String callId2 = i3Util.generateCallId();
////
////        // Create new call detail object
////        IvrCallDetail callDetail = ivrUtil.newIvrCallDetail(uid, "404-935-4937", "1-800-698-4940", "702-456-7878", "1338004934", null, null);
////        String callDetailJson = ivrUtil.getIvrCallDetailJson(callDetail);
////
////        // IVR forward of call detail
////        ivrModule.postCallDetail(callDetailJson);
////
////        // Create new call #1 object for call detail *********
////        I3Call call1 = i3Util.newI3call(callId1, "AQAT", "404-935-4937", "1-800-698-4940",
////                "PayPal", uid, new ArrayList<>(Arrays.asList("54", "55", "23")));
////        String callJson1 = i3Util.getI3CallJson(call1);
////        //Receive Call #1 (picked up by agent)
////        ResponseEntity<String> i3Response1 = i3Module.receiveCall(callJson1);
////        String statusCode1 = i3Response1.getStatusCode().toString();
////        I3Call response1 = I3Util.getI3call(i3Response1.getBody());
////
////        // Create new call #2 object for call detail *********
////        I3Call call2 = i3Util.newI3call(callId2, "AQAT", "404-935-4937", "1-800-698-4940",
////                "PayPal", uid, new ArrayList<>(Arrays.asList("54", "55", "23")));
////        String callJson2 = i3Util.getI3CallJson(call2);
////        //Receive Call #2 (picked up by agent)
////        ResponseEntity<String> i3Response2 = i3Module.receiveCall(callJson2);
////        String statusCode2 = i3Response2.getStatusCode().toString();
////        I3Call response2 = I3Util.getI3call(i3Response2.getBody());
////
////        //Validate Response
////        assertThat("Post received (picked up) call 1 API StatusCode is 200", statusCode1, is(equalTo("200")));
////        assertThat("Post received (picked up) call 2 API StatusCode is 200", statusCode2, is(equalTo("200")));
////
////        // Validate new call records are associated with call detail from IVR
////        Map<String, Object> actualCallDetail = transactionUtil.getCallDetailsByUid(uid);
////        Map<String, Object> actualCall1 = transactionUtil.getCall(response1.getId().toString());
////        Map<String, Object> actualCall2 = transactionUtil.getCall(response2.getId().toString());
////        assertThat("Call 1 is Associated with Call Detail in DB", actualCall1.get("call_detail_id"), is(equalTo(actualCallDetail.get("id"))));
////        assertThat("Call 2 is Associated with Call Detail in DB", actualCall2.get("call_detail_id"), is(equalTo(actualCallDetail.get("id"))));
////
////    }
////
////    @Test(groups = {"version-2.3.0", "in-progress", "i3", "integration"}, enabled = false)
////    public void testReceiveCallNoUid() {
////
////        String callId = i3Util.generateCallId();
////
////        // Create new call object for call detail
////        I3Call call = i3Util.newI3call(callId, "AQAT", "404-935-4937", "1-800-698-4940",
////                "PayPal", null, new ArrayList<>(Arrays.asList("54", "55", "23")));
////        String callJson = i3Util.getI3CallJson(call);
////
////        //Receive Call (picked up by agent)
////        ResponseEntity<String> i3Response = i3Module.receiveCall(callJson);
////        String statusCode = i3Response.getStatusCode().toString();
////        I3Call response = I3Util.getI3call(i3Response.getBody());
////
////        //Validate Response
////        assertThat("Post received (picked up) call API StatusCode is 200", statusCode, is(equalTo("200")));
////
////        // Validate response contains assigned UID
////        assertThat("Receive Call Response provides generated UID for I3", response.getUid(), is(notNullValue()));
////
////    }
////
////    @Test(groups = {"version-2.3.0", "in-progress", "i3", "integration"}, dataProvider = "requiredFields", enabled = false)
////    public void testReceiveCallRequiredFields(String field, String expectedMessage, I3Call call) throws IOException {
////
////        // Create new call object for call detail
////        String callJson = i3Util.getI3CallJson(call);
////
////        //Receive Call (picked up by agent)
////        try {
////            i3Module.receiveCall(callJson);
////            assertThat(field + " is required", true, is(false));
////        }
////        catch(HttpClientErrorException client) {
////
////            assertThat(field + " is required HTTP Response is 400", client.getStatusCode(), is(equalTo(HttpStatus.BAD_REQUEST)));
////            assertThat(field + " is required Error Message", client.getResponseBodyAsString(), is(equalTo(expectedMessage)));
////
////        }
////
////    }
////
////    @Test(groups = {"version-2.3.0", "in-progress", "i3", "integration"}, enabled = false)
////    public void testReceiveCallEmptyData() throws IOException {
////
////        //Receive Call (picked up by agent)
////        try {
////            i3Module.receiveCall("");
////            assertThat("Data is required", true, is(false));
////        }
////        catch(HttpClientErrorException client) {
////
////            assertThat("Data is required HTTP Response is 400", client.getStatusCode(), is(equalTo(HttpStatus.BAD_REQUEST)));
////            assertThat("Data is required Error Message", client.getResponseBodyAsString(), is(equalTo("No call data provided")));
////
////        }
////
////    }
////
////    @Test(groups = {"version-2.3.0", "in-progress", "i3", "integration"}, enabled = false)
////    public void testDisconnectCall() {
////
////        String callId = i3Util.generateCallId();
////        String uid = ivrUtil.generateUid();
////
////        // Create new call object for call detail
////        I3Call expectedCall = i3Util.newI3call(callId, "AQAT", "404-935-4937", "1-800-698-4940",
////                "PayPal", uid, new ArrayList<>(Arrays.asList("54", "55", "23")));
////        String callJson = i3Util.getI3CallJson(expectedCall);
////
////        //Receive Call
////        I3Call callResponse = i3Util.getI3call(i3Module.receiveCall(callJson).getBody());
////
////        //Disconnect Call
////        ResponseEntity<String> i3Response = i3Module.callDisconected(callId);
////        String statusCode = i3Response.getStatusCode().toString();
////
////        //Validate Response
////        assertThat("Call disconnect API StatusCode is 200", statusCode, is(equalTo("200")));
////
////        // Validate call is marked as "disconnected"
////        Map<String, Object> actualCall = transactionUtil.getCall(callResponse.getId().toString());
////        assertThat("Call is marked as 'disconnected'", Boolean.parseBoolean(actualCall.get("disconnected").toString()), is(true));
////
////    }
////
////    @Test(groups = {"version-2.3.0", "in-progress", "i3", "integration"}, enabled = false)
////    public void testDisconnectCallRequiredFields() {
////
////        //Disconnect Call without Call ID provided
////        try {
////
////            i3Module.callDisconected("");
////            assertThat("Call ID is required", true, is(false));
////
////        }
////        catch(HttpClientErrorException e) {
////
////            //Validate Response
////            assertThat("Call ID is required HTTP Response is 405", e.getStatusCode(), is(equalTo(HttpStatus.METHOD_NOT_ALLOWED)));
////
////        }
////
////    }
////
////    @DataProvider(name = "requiredFields")
////    private Object[][] requiredFields() {
////        return new Object[][]{
////                {"CallId", "Call ID is required", i3Util.newI3call(null, "AQAT", "1-800-698-4940", "404-935-4937",
////                        "PayPal", ivrUtil.generateUid(), new ArrayList<>(Arrays.asList("54", "55", "23")))}, // Missing Call ID
////                {"Agent", "Agent User ID is required", i3Util.newI3call(i3Util.generateCallId(), null, "1-800-698-4940", "404-935-4937",
////                        "PayPal", ivrUtil.generateUid(), new ArrayList<>(Arrays.asList("54", "55", "23")))},  // Missing Agent Name
////                {"DNIS", "DNIS is required", i3Util.newI3call(i3Util.generateCallId(), "AQAT", null, "404-935-4937",
////                        "PayPal", ivrUtil.generateUid(), new ArrayList<>(Arrays.asList("54", "55", "23")))}, // Missing DNIS
////                {"Queue", "Queue is required", i3Util.newI3call(i3Util.generateCallId(), "AQAT", "1-800-698-4940", "404-935-4937",
////                        null, ivrUtil.generateUid(), new ArrayList<>(Arrays.asList("54", "55", "23")))} // Missing Queue
////        };
////    }
//
//}
